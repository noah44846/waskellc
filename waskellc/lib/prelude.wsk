-- Misc. functions

id :: a -> a;
id x = x;

const :: a -> b -> a;
const x _ = x;

flip :: (a -> b -> c) -> b -> a -> c;
flip f x y = f y x;

(.) :: (b -> c) -> (a -> b) -> a -> c;
(.) f g x = f (g x);

($) :: (a -> b) -> a -> b;
($) f x = f x;

until :: (a -> Bool) -> (a -> a) -> a -> a;
until p f x = if' (p x) x (until p f (f x));

foreign import wasm "lib" print :: String -> ();
foreign import wasm "lib" panic :: () -> a;

error :: String -> a;
error s = panic (print ("Exception: " ++ s));

undefined :: a;
undefined = error "undefined";

-- Tuple functions

curry :: ((a, b) -> c) -> a -> b -> c;
curry f x y = f (x, y);

uncurry :: (a -> b -> c) -> (a, b) -> c;
uncurry f (x, y) = f x y;

fst :: (a, b) -> a;
fst (x, _) = x;

snd :: (a, b) -> b;
snd (_, y) = y;

-- Bool functions

data Bool = True | False;

not :: Bool -> Bool;
not True = False;
not False = True;

(&&) :: Bool -> Bool -> Bool;
(&&) True y = y;
(&&) False _ = False;

(||) :: Bool -> Bool -> Bool;
(||) True _ = True;
(||) False y = y;

if' :: Bool -> a -> a -> a;
if' True x _ = x;
if' False _ y = y;

boolToString :: Bool -> String;
boolToString True = "True";
boolToString False = "False";

boolEq :: Bool -> Bool -> Bool;
boolEq True True = True;
boolEq False False = True;
boolEq _ _ = False;

-- Int functions

foreign import wasm "lib" negate :: Int -> Int;
foreign import wasm "lib" (+) :: Int -> Int -> Int;
foreign import wasm "lib" (-) :: Int -> Int -> Int;
foreign import wasm "lib" (*) :: Int -> Int -> Int;
foreign import wasm "lib" (==) :: Int -> Int -> Bool;
foreign import wasm "lib" (/=) :: Int -> Int -> Bool;
foreign import wasm "lib" (<) :: Int -> Int -> Bool;
foreign import wasm "lib" (>) :: Int -> Int -> Bool;
foreign import wasm "lib" (<=) :: Int -> Int -> Bool;
foreign import wasm "lib" (>=) :: Int -> Int -> Bool;
foreign import wasm "lib" compare :: Int -> Int -> Ordering;
foreign import wasm "lib" div :: Int -> Int -> Int;
foreign import wasm "lib" mod :: Int -> Int -> Int;
foreign import wasm "lib" intToChar :: Int -> Char;

maxBound :: Int;
maxBound = 2147483647;

minBound :: Int;
minBound = (0 - maxBound) - 1;

data Ordering = LT | EQ | GT;

min :: Int -> Int -> Int;
min x y = if' (x < y) x y;

max :: Int -> Int -> Int;
max x y = if' (x > y) x y;

abs :: Int -> Int;
abs x = if' (x < 0) (negate x) x;

(^) :: Int -> Int -> Int;
(^) _ 0 = 1;
(^) 0 _ = 0;
(^) x 1 = x;
(^) x y = x * (x ^ (y - 1));

even :: Int -> Bool;
even x = (x `mod` 2) == 0;

odd :: Int -> Bool;
odd = not . even;

intToString :: Int -> String;
intToString x = if' (x < 0) (Cons '-' (intToString (negate x))) (if' (x < 10) (Cons (intToChar (x + 48)) Nil) ((intToString (x `div` 10)) ++ (Cons (intToChar ((x `mod` 10) + 48)) Nil)));

-- List functions

data List a = Nil | Cons a (List a);
--l :: List Int;
--l = (Cons 1 (Cons 2 (Cons 3 Nil)));

--h :: Int -> List Int;
--h x = Cons x (Cons x Nil);

--t :: List Int;
--t = maybe Nil id (tail l);
--t = maybe Nil id (init l);

-- maximum and minimum don't work with since they evaluate the list and then use the evaluated version
-- scanr doesn't maybe because it evaluates twice ? or make val uses 1 instead of 0

--main :: Int;
--main = maybe 0 id ((map negate l) !! 1);
--main = maybe 0 id ((filter odd l) !! 1);
--main = maybe 0 id ((filter ((>=) 2) l) !! 1);
--main = foldr (+) 0 l;
--main = maybe (-1) id ((foldr (Cons) Nil l) !! 1);
--main = if' (null Nil) 0 1;
--main = if' (null l) 0 1;
--main = length l;
--main = maybe (-1) id (t !! 0);
--main = maybe (-1) id (last l);
--main = if' (or (map ((>) (-1)) l)) 1 0;
--main = if' (and (map ((>) (4)) l)) 1 0;
--main = if' (any ((>=) 0) l) 1 0;
--main = if' (all ((>) 4) l) 1 0;
--main = foldr (+) 0 (concat (Cons l (Cons l Nil)));
--main = length (fst (splitAt 1 l)) + length (snd (splitAt 1 l));
--main = maybe (-1) id ((take 8 (cycle l)) !! 4);
--main = maybe (-1) id ((fst (span ((>=) 2) l)) !! 3);
--main = maybe (-1) id ((fst (unzip (zip l l))) !! 1);
--main = sum l;
--main = sum (concatMap h l);
--main = maybe (-1) id ((scanl (+) 0 l) !! 3);
--main = maybe (-1) id ((iterate ((*) 2) 1) !! 10);

listToString :: (a -> String) -> List a -> String;
listToString _ Nil = "Nil";
listToString f (Cons x xs) = "Cons " ++ (f x) ++ " (" ++ (listToString f xs) ++ ")";

listEq :: (a -> a -> Bool) -> List a -> List a -> Bool;
listEq _ Nil Nil = True;
listEq _ Nil _ = False;
listEq _ _ Nil = False;
listEq f (Cons x xs) (Cons y ys) = if' (f x y) (listEq f xs ys) False;

map :: (a -> b) -> List a -> List b;
map _ Nil = Nil;
map f (Cons x xs) = Cons (f x) (map f xs);

(++) :: List a -> List a -> List a;
(++) Nil ys = ys;
(++) (Cons x xs) ys = Cons x (xs ++ ys);

filter :: (a -> Bool) -> List a -> List a;
filter _ Nil = Nil;
filter p (Cons x xs) = if' (p x) (Cons x (filter p xs)) (filter p xs);

head :: List a -> Maybe a;
head (Cons x _) = Just x;
head Nil = Nothing;

last :: List a -> Maybe a;
last (Cons x Nil) = Just x;
last (Cons _ xs) = last xs;
last Nil = Nothing;

tail :: List a -> Maybe (List a);
tail (Cons _ xs) = Just xs;
tail Nil = Nothing;

init :: List a -> Maybe (List a);
init Nil = Nothing;
init (Cons _ Nil) = Just Nil;
init (Cons x xs) = Just (Cons x (maybe Nil id (init xs)));

null :: List a -> Bool;
null Nil = True;
null _ = False;

length :: List a -> Int;
length Nil = 0;
length (Cons _ xs) = 1 + length xs;

(!!) :: List a -> Int -> Maybe a;
(!!) (Cons x _) 0 = Just x;
(!!) (Cons _ xs) n = if' (n >= 0) (xs !! (n - 1)) Nothing;
(!!) Nil _ = Nothing;

reverse :: List a -> List a;
reverse = foldl (flip Cons) Nil;

-- List functions: reducing operations

foldl :: (b -> a -> b) -> b -> List a -> b;
foldl _ z Nil = z;
foldl f z (Cons x xs) = foldl f (f z x) xs;

foldr :: (a -> b -> b) -> b -> List a -> b;
foldr _ z Nil = z;
foldr f z (Cons x xs) = f x (foldr f z xs);

and :: List Bool -> Bool;
and = foldr (&&) True;

or :: List Bool -> Bool;
or = foldr (||) False;

any :: (a -> Bool) -> List a -> Bool;
any p = or . map p; -- precendence

all :: (a -> Bool) -> List a -> Bool;
all p = and . map p;

sum :: List Int -> Int;
sum = foldl (+) 0;

product :: List Int -> Int;
product = foldl (*) 1;

concat :: List (List a) -> List a;
concat = foldr (++) Nil;

concatMap :: (a -> List b) -> List a -> List b;
concatMap f = concat . map f;

maximum :: List Int -> Maybe Int;
maximum Nil = Nothing;
maximum xs = Just (foldr max minBound xs);

minimum :: List Int -> Maybe Int;
minimum Nil = Nothing;
minimum xs = Just (foldr min maxBound xs);

-- List functions: building operations

scanl :: (b -> a -> b) -> b -> List a -> List b;
scanl _ z Nil = Cons z Nil;
scanl f z (Cons x xs) = Cons z (scanl f (f z x) xs);

scanr :: (a -> b -> b) -> b -> List a -> List b;
scanr _ z Nil = Cons z Nil;
scanr f z (Cons x xs) = Cons (f x (head (scanr f z xs))) (scanr f z xs);

iterate :: (a -> a) -> a -> List a;
iterate f x = Cons x (iterate f (f x));

repeat :: a -> List a;
repeat x = Cons x (repeat x);

replicate :: Int -> a -> List a;
replicate n = take n . repeat;

cycle :: List a -> List a;
cycle xs = xs ++ cycle xs;

-- List functions: sublists

take :: Int -> List a -> List a;
take 0 _ = Nil;
take n Nil = Nil;
take n (Cons x xs) = Cons x (take (n - 1) xs);

drop :: Int -> List a -> List a;
drop 0 xs = xs;
drop n Nil = Nil;
drop n (Cons _ xs) = drop (n - 1) xs;

splitAt :: Int -> List a -> (List a, List a);
splitAt n xs = (take n xs, drop n xs);

takeWhile :: (a -> Bool) -> List a -> List a;
takeWhile _ Nil = Nil;
takeWhile p (Cons x xs) = if' (p x) (Cons x (takeWhile p xs)) Nil;

dropWhile :: (a -> Bool) -> List a -> List a;
dropWhile _ Nil = Nil;
dropWhile p (Cons x xs) = if' (p x) (dropWhile p xs) (Cons x xs);

span :: (a -> Bool) -> List a -> (List a, List a);
span p xs = (takeWhile p xs, dropWhile p xs);

break :: (a -> Bool) -> List a -> (List a, List a);
break p = span (not . p);

-- List functions: zipping

zip :: List a -> List b -> List (a, b);
zip Nil _ = Nil;
zip _ Nil = Nil;
zip (Cons x xs) (Cons y ys) = Cons (x, y) (zip xs ys);

zipWith :: (a -> b -> c) -> List a -> List b -> List c;
zipWith _ Nil _ = Nil;
zipWith _ _ Nil = Nil;
zipWith f (Cons x xs) (Cons y ys) = Cons (f x y) (zipWith f xs ys);

unzip :: List (a, b) -> (List a, List b);
unzip Nil = (Nil, Nil);
unzip (Cons (x, y) xys) = (Cons x (fst (unzip xys)), Cons y (snd (unzip xys)));

data Maybe a = Just a | Nothing;

maybe :: b -> (a -> b) -> Maybe a -> b;
maybe z _ Nothing = z;
maybe _ f (Just x) = f x;

isJust :: Maybe a -> Bool;
isJust (Just _) = True;
isJust Nothing = False;

isNothing :: Maybe a -> Bool;
isNothing = not . isJust;

maybeToString :: (a -> String) -> Maybe a -> String;
maybeToString _ Nothing = "Nothing";
maybeToString f (Just x) = "Just " ++ (f x);

maybeEq :: (a -> a -> Bool) -> Maybe a -> Maybe a -> Bool;
maybeEq _ Nothing Nothing = True;
maybeEq _ Nothing _ = False;
maybeEq _ _ Nothing = False;
maybeEq f (Just x) (Just y) = f x y;

-- Either functions

data Either a b = Left a | Right b;

either :: (a -> c) -> (b -> c) -> Either a b -> c;
either f _ (Left x) = f x;
either _ g (Right y) = g y;

isLeft :: Either a b -> Bool;
isLeft (Left _) = True;
isLeft (Right _) = False;

isRight :: Either a b -> Bool;
isRight = not . isLeft;

eitherToString :: (a -> String) -> (b -> String) -> Either a b -> String;
eitherToString f _ (Left x) = "Left " ++ (f x);
eitherToString _ g (Right y) = "Right " ++ (g y);

eitherEq :: (a -> a -> Bool) -> (b -> b -> Bool) -> Either a b -> Either a b -> Bool;
eitherEq _ _ (Left x) (Right y) = False;
eitherEq _ _ (Right x) (Left y) = False;
eitherEq f _ (Left x) (Left y) = f x y;
eitherEq _ g (Right x) (Right y) = g x y;

-- Ratio functions

data Ratio = Ratio Int Int;

(%) :: Int -> Int -> Ratio;
(%) a b = Ratio a b;

numerator :: Ratio -> Int;
numerator (Ratio a _) = a;

denominator :: Ratio -> Int;
denominator (Ratio _ b) = b;

ratioFromInt :: Int -> Ratio;
ratioFromInt x = Ratio x 1;

addRatio :: Ratio -> Ratio -> Ratio;
addRatio (Ratio a b) (Ratio c d) = Ratio (a * d + b * c) (b * d);

mulRatio :: Ratio -> Ratio -> Ratio;
mulRatio (Ratio a b) (Ratio c d) = Ratio (a * c) (b * d);

negateRatio :: Ratio -> Ratio;
negateRatio (Ratio a b) = Ratio (-a) b;

subRatio :: Ratio -> Ratio -> Ratio;
subRatio a b = addRatio a (negateRatio b);

recipRatio :: Ratio -> Ratio;
recipRatio (Ratio a b) = Ratio b a;

divRatio :: Ratio -> Ratio -> Ratio;
divRatio a b = mulRatio a (recipRatio b);

evalToInt :: Ratio -> Int;
evalToInt (Ratio a b) = a `div` b;

ratioToString :: Ratio -> String;
ratioToString (Ratio a b) = (intToString a) ++ " % " ++ (intToString b);

ratioEq :: Ratio -> Ratio -> Bool;
ratioEq a b = (numerator a == numerator b) && (denominator a == denominator b);
