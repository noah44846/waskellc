--foreign export wasm add :: Int -> Int -> Int;
add :: Int -> Int -> Int;
add = (+);

--foreign export wasm plusOne :: Int -> Int;
plusOne :: Int -> Int;
plusOne = (+) 1;

--foreign export wasm add' :: Int -> Int -> Int;
add' :: Int -> Int -> Int;
add' x = (+) x;

apply1 :: (a -> b) -> a -> b;
apply1 f = f;

apply2 :: (a -> b -> c) -> a -> b -> c;
apply2 f x y = ((f) x) y;
-- equivalent to: f x y

apply2' :: (a -> b -> c) -> a -> b -> c;
apply2' f = f;

apply2Flip :: a -> (a -> b -> c) -> (b -> c);
-- equivalent to: a -> (a -> b -> c) -> b -> c
apply2Flip x f = f x;

-- check that if you replace the Int with a type variable, it fails
apply2With2 :: (Int -> b -> c) -> b -> c;
apply2With2 f = apply1 (f 2);

main :: Int;
-- 3 + 3 + 3 + 3 + 3 + 3 = 18
main = (apply2 add 1 2) + (apply2Flip 1 add' 2) + (apply2' (*) (-3) (-1)) + (plusOne 2) + (apply1 (add 1) 2) + (apply2With2 add 1);
