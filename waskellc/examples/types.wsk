data Bool = True | False;

and :: Bool -> Bool -> Bool;
and True y = y;
and False _ = False;

or :: Bool -> Bool -> Bool;
or True _ = True;
or False y = y;

if' :: Bool -> a -> a -> a;
if' True x _ = x;
if' False _ y = y;

boolToInt :: Bool -> Int;
boolToInt True = 100;
boolToInt False = -100;

intToBool :: Int -> Bool;
intToBool 0 = False;
intToBool _ = True;

boolMain :: Int;
-- -100 + 100 + -100 = -100
boolMain = boolToInt (if' (intToBool 0) True False) + boolToInt (if' (intToBool 1) True False) + boolToInt (and (or True False) (and False True));

--data List a = Nil | Cons a (List a);
data IntList = Nil | Cons Int IntList;

mapIntList :: (Int -> Int) -> IntList -> IntList;
mapIntList _ Nil = Nil;
mapIntList f (Cons x xs) = Cons (f x) (mapIntList f xs);

foldIntList :: (Int -> a -> a) -> a -> IntList -> a;
foldIntList _ z Nil = z;
foldIntList f z (Cons x xs) = f x (foldIntList f z xs);

repeat :: Int -> IntList;
repeat x = Cons x (repeat x);

take :: Int -> IntList -> IntList;
take 0 _ = Nil;
take n Nil = Nil;
take n (Cons x xs) = Cons x (take (n - 1) xs);

listMain :: Int;
listMain = foldIntList (+) 0 (take 10 (mapIntList ((*) 2) (repeat 1)));

--data Maybe a = Just a | Nothing;
data IntMaybe = Just Int | Nothing;

maybeToInt :: IntMaybe -> Int;
maybeToInt (Just x) = x;
maybeToInt Nothing = 0;

maybeAdd :: IntMaybe -> IntMaybe -> IntMaybe;
maybeAdd (Just x) (Just y) = Just (x + y);
maybeAdd _ _ = Nothing;

maybeMain :: Int;
-- 1 + 2 + 0 = 3
maybeMain = maybeToInt (maybeAdd (Just 1) (Just 2)) + maybeToInt (maybeAdd (Just 1) Nothing);

data Ratio = Ratio Int Int;

ratioMul :: Ratio -> Ratio -> Ratio;
ratioMul (Ratio a b) (Ratio c d) = Ratio (a * c) (b * d);

ratioAdd :: Ratio -> Ratio -> Ratio;
ratioAdd (Ratio a b) (Ratio c d) = Ratio (a * d + b * c) (b * d);

eval :: Ratio -> Int;
eval (Ratio a b) = a / b;

ratioMain :: Int;
-- (1/2 + 1/3) * 12/2 = 5/6 * 6 = 5
ratioMain = eval (ratioMul (ratioAdd (Ratio 1 2) (Ratio 1 3)) (Ratio 12 2));

data IntTree = Empty | Node IntTree Int IntTree;

foreign export wasm empty :: IntTree;
empty = Empty;

foreign export wasm node :: IntTree -> Int -> IntTree -> IntTree;
node = Node;

foreign export wasm leaf :: Int -> IntTree;
leaf x = Node Empty x Empty;

mapIntTree :: (Int -> Int) -> IntTree -> IntTree;
mapIntTree f Empty = Empty;
mapIntTree f (Node l x r) = Node (mapIntTree f l) (f x) (mapIntTree f r);

foldIntTree :: (Int -> a -> a -> a) -> Int -> IntTree -> a;
foldIntTree _ z Empty = z;
foldIntTree f z (Node l x r) = f x (foldIntTree f z l) (foldIntTree f z r);

flattenDfsAux :: IntTree -> IntList -> IntList;
flattenDfsAux Empty xs = xs;
flattenDfsAux (Node l x r) xs = flattenDfsAux l (Cons x (flattenDfsAux r xs));

foreign export wasm flattenDfs :: IntTree -> IntList;
flattenDfs t = flattenDfsAux t Nil;

add3 :: Int -> Int -> Int -> Int;
add3 x y z = x + y + z;

exampleTree :: IntTree;
exampleTree = Node (Node (leaf 1) 2 (leaf 3)) 4 (leaf 5);

foreign export wasm exampleTreeFlattened :: IntList;
exampleTreeFlattened = flattenDfs exampleTree;

treeMain :: Int;
-- 2*1 + 2*2 + 2*3 + 2*4 + 2*5 = 30
treeMain = foldIntTree add3 0 (mapIntTree ((*) 2) exampleTree);

main :: Int;
-- -100 + 20 + 3 + 5 + 30 = -42
main = boolMain + listMain + maybeMain + ratioMain + treeMain;
